// TODO: temporary
ext.geServer = System.getProperty('geServer')

// With build can plugin v1.15+, you can easily add expensive data inside the background {} block. Everything inside
// here is executed in a separate thread, and guaranteed to complete before finishing the build and publishing the
// scan.
buildScan.background {
    // We can also use the git commit ID for generating a custom link, useful in Gradle Enterprise for filtering for
    // all scans built from the same git commit. This will create a URL that looks like:
    // https://«geServer»/scans?search.names=Git%20Commit%20ID&search.values=«gitCommitId»
    // This pattern can be used for creating custom links for arbitrary key-value pairs that you track with built
    // scan custom values.
    // It's simple to capture values from git
    // `execAndGetStdout` is a custom method defined below.
    def gitCommitId = execAndGetStdout('git', 'rev-parse', '--verify', 'HEAD')

    // In order to be able to create this custom link, we need a custom value with the expected key name.
    value 'Git Commit ID', gitCommitId
    link 'Git commit scans', customValueSearchUrl(['Git Commit ID': gitCommitId])
}

// Build scans can be extended with custom values, which are just key-value pairs. This method builds
// a url that includes a search for a specific key-value pair. Because every aspect of the Gradle
// Enterprise UI is specified by the URL, this enables some pretty clever things.
def customValueSearchUrl(Map<String, String> search) {
    def query = search.collect { name, value ->
        "search.names=${name.urlEncode()}&search.values=${value.urlEncode()}"
    }.join('&')
    return "$geServer/scans?$query"
}

// This method can be used for executing arbitrary shell processes
def execAndGetStdout(String... args) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine(args)
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// An extension method on String
String.metaClass.urlEncode = { -> URLEncoder.encode(delegate as String, 'UTF-8') }
