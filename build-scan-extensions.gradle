buildScan {
    captureTaskInputFiles = true

    tagOs()
    tagIde()
    addGitMetadata()
    addCiMetadata()
}

void tagOs() {
    def os = System.getProperty('os.name')
    if (os) {
        buildScan.tag os
    }
}

void tagIde() {
    if (project.hasProperty('android.injected.invoked.from.ide')) {
        buildScan.tag 'Android Studio'
    } else if (project.hasProperty("idea.executable")) {
        buildScan.tag 'IDEA'
    } else if (System.getenv('eclipse.buildId')) {
        // TODO replace with project property when available https://github.com/eclipse/buildship/issues/911
        buildScan.tag 'Eclipse'
    }
}

void addGitMetadata() {
    buildScan.background {
        def gitCommitId = execAndGetStdout('git', 'rev-parse', '--short=8', '--verify', 'HEAD')
        def gitBranchName = execAndGetStdout('git', 'rev-parse', '--abbrev-ref', 'HEAD')
        def gitStatus = execAndGetStdout('git', 'status', '--porcelain')

        if (gitBranchName && !gitBranchName.isEmpty() && gitBranchName != 'HEAD') {
            tag gitBranchName
            value 'Git branch', gitBranchName
        }
        if (gitStatus && !gitStatus.isEmpty()) {
            tag 'dirty'
            value 'Git status', gitStatus
        }

        def commitIdLabel = 'Git Commit ID'
        value commitIdLabel, gitCommitId
        link 'Git commit scans', customValueSearchUrl([(commitIdLabel): gitCommitId])
    }
}

void addCiMetadata() {
    def ciBuild = 'CI BUILD'
    def isCi = false

    // Jenkins
    if (System.getenv('BUILD_NUMBER')) {
        isCi = true
        buildScan.value 'Build number', System.getenv('BUILD_NUMBER')
    }
    if (System.getenv('JOB_NAME')) {
        isCi = true
        buildScan.value 'Job name', System.getenv('JOB_NAME')
    }
    if (System.getenv('BUILD_URL')) {
        isCi = true
        buildScan.link ciBuild, System.getenv('BUILD_URL')
    }

    // Team City
    if (System.getenv('CI_BUILD_URL')) {
        isCi = true
        buildScan.link ciBuild, System.getenv('CI_BUILD_URL')
    }

    // Circle CI
    if (System.getenv('CIRCLE_BUILD_URL')) {
        isCi = true
        buildScan.link ciBuild, System.getenv('CIRCLE_BUILD_URL')
    }

    // Bamboo
    if (System.getenv('bamboo.resultsUrl')) {
        isCi = true
        buildScan.link ciBuild, System.getenv('bamboo.resultsUrl')
    }

    // Concourse
    // https://concourse-ci.org/implementing-resource-types.html#resource-metadata
    // https://stackoverflow.com/a/45037360/2740621
    // Issue filed on Concourse docs github issue tracker: https://github.com/concourse/docs/issues/240
    def concourseAtcExternalUrl = System.getenv('ATC_EXTERNAL_URL')
    def concourseBuildTeamName = System.getenv('BUILD_TEAM_NAME')
    def concourseBuildPipelineName = System.getenv('BUILD_PIPELINE_NAME')
    def concourseBuildJobName = System.getenv('BUILD_JOB_NAME')
    def concourseBuildName = System.getenv('BUILD_NAME')
    if (concourseAtcExternalUrl && concourseBuildTeamName && concourseBuildPipelineName && concourseBuildJobName && concourseBuildName) {
        isCi = true

        def url = "$concourseAtcExternalUrl/teams/$concourseBuildTeamName/pipelines/$concourseBuildPipelineName/jobs/$concourseBuildJobName/builds/$concourseBuildName"
        try {
            buildScan.link ciBuild, url
        } catch (Exception ignored) {
            // Because I don't trust this URL to be correct and I don't want to throw an exception when trying to add it
            project.logger.warn("Cannot add link to Concourse CI job. $url is not a valid url.")
        }
    }

    if (isCi) {
        buildScan.tag('CI')
    } else {
        buildScan.tag('LOCAL')
    }
}

String execAndGetStdout(String... args) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine(args)
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

String customValueSearchUrl(Map<String, String> search) {
    def query = search.collect { name, value ->
        "search.names=${URLEncoder.encode(name, 'UTF-8')}&search.values=${URLEncoder.encode(value, 'UTF-8')}"
    }.join('&')

    return "$buildScan.server/scans?$query"
}
