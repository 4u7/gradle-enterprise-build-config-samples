buildScan {
    tagOs()
    tagIde()
    tagCiOrLocal()
    addCiMetadata()
    addGitMetadata()
}

void tagOs() {
    buildScan.tag System.getProperty('os.name')
}

void tagIde() {
    if (project.hasProperty('android.injected.invoked.from.ide')) {
        buildScan.tag 'Android Studio'
    } else if (project.hasProperty('idea.executable')) {
        buildScan.tag 'IntelliJ IDEA'
    } else if (System.getProperty('eclipse.buildId')) {
        buildScan.tag 'Eclipse'
    } 
}

void tagCiOrLocal() {
    buildScan.tag(isCi() ? 'CI' : 'LOCAL')
}

void addGitMetadata() {
    buildScan.background {
        def gitCommitId = execAndGetStdout('git', 'rev-parse', '--short=8', '--verify', 'HEAD')
        def gitBranchName = execAndGetStdout('git', 'rev-parse', '--abbrev-ref', 'HEAD')
        def gitStatus = execAndGetStdout('git', 'status', '--porcelain')

        if(gitCommitId) {
            def commitIdLabel = 'Git commit id'
            value commitIdLabel, gitCommitId
            link 'Git commit build scans', customValueSearchUrl([(commitIdLabel): gitCommitId])
        }
        if (gitBranchName) {
            tag gitBranchName
            value 'Git branch', gitBranchName
        }
        if (gitStatus) {
            tag 'Dirty'
            value 'Git status', gitStatus
        }
    }
}

void addCiMetadata() {
    // Jenkins
    if (System.getenv('BUILD_URL')) {
        link 'Jenkins build', System.getenv('BUILD_URL')
    }
    if (System.getenv('BUILD_NUMBER')) {
        value 'CI build number', System.getenv('BUILD_NUMBER')
    }
    if (System.getenv('JOB_NAME')) {
        value 'CI job name', System.getenv('JOB_NAME')
    }
    if (System.getenv('STAGE_NAME')) {
        value 'CI stage name', System.getenv('STAGE_NAME')
    }
    
    // Team City
    if (System.getenv('CI_BUILD_URL')) {
        link 'TeamCity build', System.getenv('CI_BUILD_URL')
    }

    // Circle CI
    if (System.getenv('CIRCLE_BUILD_URL')) {
        link 'CircleCI build', System.getenv('CIRCLE_BUILD_URL')
    }

    // Bamboo
    if (System.getenv('bamboo.resultsUrl')) {
        link 'Bamboo build', System.getenv('bamboo.resultsUrl')
    }
}

boolean isCi() {
    System.getenv('BUILD_URL') ||        // Jenkins
    System.getenv('CI_BUILD_URL') ||     // TeamCity
    System.getenv('CIRCLE_BUILD_URL') || // CircleCI
    System.getenv('bamboo.resultsUrl')   // Bamboo
}

String execAndGetStdout(String... args) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine(args)
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

String customValueSearchUrl(Map<String, String> search) {
    def query = search.collect { name, value ->
        "search.names=${name.urlEncode()}&search.values=${value.urlEncode()}"
    }.join('&')

    return "$buildScan.server/scans?$query"
}

// An extension method on String
String.metaClass.urlEncode = { -> URLEncoder.encode(delegate as String, 'UTF-8') }
